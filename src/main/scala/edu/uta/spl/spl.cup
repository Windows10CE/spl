/********************************************************************************
*
* File: spl.cup
* The SPL parser
*
********************************************************************************/

package edu.uta.spl;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;


parser code {:

    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.FLOAT_LITERAL,
      sym.AND, sym.ARRAY, sym.BOOLEAN, sym.BY, sym.DEF, sym.DIV, sym.ELSE, sym.EQUAL, sym.EXIT, sym.FALSE,
      sym.FLOAT, sym.FOR, sym.IF, sym.INT, sym.LOOP, sym.MOD,
      sym.NOT, sym.OR, sym.PRINT, sym.READ, sym.RETURN, sym.STRING, sym.TO, sym.TYPE, sym.VAR, sym.WHILE,
      sym.PLUS, sym.MINUS, sym.TIMES, sym.TRUE,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI,
      sym.COMMA, sym.SHARP, sym.DOT, sym.LP, sym.RP, sym.LB, sym.RB, sym.LSB, sym.RSB
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "FLOAT_LITERAL",
      "AND &&", "ARRAY", "BOOLEAN", "BY", "DEF", "DIV /", "ELSE", "EQUAL", "EXIT", "FALSE",
      "FLOAT", "FOR", "IF", "INT", "LOOP", "MOD %",
      "NOT", "OR ||", "PRINT", "READ", "RETURN", "STRING", "TO", "TYPE", "VAR", "WHILE",
      "PLUS +", "MINUS -", "TIMES *", "TRUE",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ ==", "NEQ <>", "COLON :", "SEMI ;",
      "COMMA ,", "SHARP #", "DOT .", "LP (", "RP )", "LB "+'{', "RB "+'}', "LSB [", "RSB ]"
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return token_names[s.sym];
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }

:};

/* Terminals (tokens returned by the scanner). */
terminal String  ID, STRING_LITERAL;
terminal Integer INTEGER_LITERAL;
terminal Float   FLOAT_LITERAL;
terminal         AND, ARRAY, BOOLEAN, BY, DEF, DIV, ELSE, EQUAL, EXIT, FALSE,
                 FLOAT, FOR, IF, INT, LOOP, MOD,
                 NOT, OR, PRINT, READ, RETURN, STRING, TO, TYPE, VAR, WHILE,
                 PLUS, MINUS, TIMES, TRUE, LT, LEQ, GT, GEQ, EQ, NEQ, COLON, SEMI,
                 COMMA, SHARP, DOT, LP, RP, LB, RB, LSB, RSB, UMINUS;

non terminal program;
non terminal BlockStmt block_content;
non terminal List<Definition> defs;
non terminal Definition def;
non terminal VarDef var_def;
non terminal TypeDef type_def;
non terminal FuncDef func_def;
non terminal Type type;
non terminal List<Type> types;
non terminal List<Bind<Type>> binding_list;
non terminal List<Bind<Type>> bindings;
non terminal Bind binding;
non terminal Lvalue lvalue;
non terminal Expr expr;
non terminal List<Expr> expr_list;
non terminal List<Expr> exprs;
non terminal Bind<Expr> field_assignment;
non terminal List<Bind<Expr>> field_assignments;
non terminal Stmt stmt;
non terminal Stmt optional_else;
non terminal List<Lvalue> lvalues;
non terminal List<Stmt> stmts;

precedence nonassoc ELSE;
precedence nonassoc LP, RP, LB, RB, LSB, RSB, SEMI;
precedence nonassoc COMMA;
precedence left     OR;
precedence left     AND;
precedence right    NOT;
precedence nonassoc EQ, NEQ, LT, GT, LEQ, GEQ;
precedence left     PLUS, MINUS;
precedence left     TIMES, DIV, MOD;
precedence right    UMINUS;

start with program;

program         ::= block_content:bstmt   {: SPL.setAST(new Program(bstmt)); :}
                ;
block_content   ::= defs:ds stmts:ss  {: RESULT = new BlockSt(ds, ss); :}
                |   stmts:ss          {: RESULT = new BlockSt(nil, ss); :}
                ;

defs            ::= defs:ds def:d SEMI   {: RESULT = append(ds, d); :}
                |   def:d SEMI           {: RESULT = append(nil, d); :}
                ;
def             ::= var_def:v   {: RESULT = v; :}
                |   type_def:t  {: RESULT = t; :}
                |   func_def:f  {: RESULT = f; :}
                ;
var_def         ::= VAR ID:id EQUAL expr:e                 {: RESULT = new VarDef(id, new AnyType(), e); :}
                |   VAR ID:id COLON type:t EQUAL expr:e    {: RESULT = new VarDef(id, t, e); :}
                ;
type_def        ::= TYPE ID:id EQUAL type:t {: RESULT = new TypeDef(id, t); :}
                ;
func_def        ::= DEF ID:id LP binding_list:bs RP LB block_content:b RB              {: RESULT = new FuncDef(id, bs, new NoType(), b); :}
                |   DEF ID:id LP binding_list:bs RP COLON type:t LB block_content:b RB {: RESULT = new FuncDef(id, bs, t, b); :}
                ;

type            ::= INT:i                 {: RESULT = new IntType(); :}
                |   FLOAT                 {: RESULT = new FloatType(); :}
                |   BOOLEAN               {: RESULT = new BooleanType(); :}
                |   STRING                {: RESULT = new StringType(); :}
                |   ID:id                 {: RESULT = new NamedType(id); :}
                |   ARRAY LSB type:t RSB  {: RESULT = new ArrayType(t); :}
                |   LB bindings:bs RB     {: RESULT = new RecordType(bs); :}
                |   LP RP                 {: RESULT = new NoType(); :}
                |   LP type:t RP          {: RESULT = t; :}
                |   LP types:ts RP        {: RESULT = new TupleType(ts); :}
                ;
types           ::= types:ts COMMA type:t   {: RESULT = append(ts, t); :}
                | type:t                    {: RESULT = append(nil, t); :}
                ;

binding_list    ::=             {: RESULT = nil; :} // nothing
                |   bindings:bs {: RESULT = bs; :}
                ;
bindings        ::= bindings:bs COMMA binding:b {: RESULT = append(bs, b); :}
                |   binding:b                   {: RESULT = append(nil, b); :}
                ;
binding         ::= ID:id COLON type:t  {: RESULT = new Bind<Type>(id, t); :}
                ;

lvalue          ::= ID
                |   lvalue LSB expr RSB
                |   lvalue DOT ID
                |   lvalue SHARP INTEGER_LITERAL    {: 
                ;

expr            ::= INTEGER_LITERAL | FLOAT_LITERAL | STRING_LITERAL | TRUE | FALSE
                |   lvalue
                |   MINUS expr %prec UMINUS
                |   NOT expr
                |   expr PLUS expr
                |   expr MINUS expr
                |   expr TIMES expr
                |   expr DIV expr
                |   expr MOD expr
                |   expr AND expr
                |   expr OR expr
                |   expr EQ expr
                |   expr NEQ expr
                |   expr LT expr
                |   expr LEQ expr
                |   expr GT expr
                |   expr GEQ expr
                |   ARRAY LP expr COMMA expr RP
                |   ID LP expr_list RP
                |   LB field_assignments RB
                |   LP RP
                |   LP expr RP
                |   LP exprs RP
                |   LSB expr_list RSB
                ;
expr_list       ::= // nothing
                | exprs
                ;
exprs           ::= exprs COMMA expr
                |   expr
                ;

field_assignment    ::= ID EQUAL expr
                    ;
field_assignments   ::= field_assignments COMMA field_assignment
                    | field_assignment
                    ;

stmt            ::= lvalue EQUAL expr
                |   ID LP expr_list RP
                |   LB block_content RB
                |   READ LP lvalues RP
                |   PRINT LP expr_list RP
                |   IF LP expr RP stmt optional_else
                |   FOR LP ID EQUAL expr TO expr RP stmt
                |   FOR LP ID EQUAL expr TO expr BY expr RP stmt
                |   WHILE LP expr RP stmt
                |   LOOP stmt
                |   EXIT
                |   RETURN
                |   RETURN expr
                ;

optional_else   ::= // nothing
                |   ELSE stmt
                ;

lvalues         ::= lvalues COMMA lvalue
                | lvalue
                ;

stmts           ::= stmt SEMI
                |   stmts stmt SEMI
                ;

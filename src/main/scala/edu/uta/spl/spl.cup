/********************************************************************************
*
* File: spl.cup
* The SPL parser
*
********************************************************************************/

package edu.uta.spl;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;


parser code {:

    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.FLOAT_LITERAL,
      sym.AND, sym.ARRAY, sym.BOOLEAN, sym.BY, sym.DEF, sym.DIV, sym.ELSE, sym.EQUAL, sym.EXIT, sym.FALSE,
      sym.FLOAT, sym.FOR, sym.IF, sym.INT, sym.LOOP, sym.MOD,
      sym.NOT, sym.OR, sym.PRINT, sym.READ, sym.RETURN, sym.STRING, sym.TO, sym.TYPE, sym.VAR, sym.WHILE,
      sym.PLUS, sym.MINUS, sym.TIMES, sym.TRUE,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI,
      sym.COMMA, sym.SHARP, sym.DOT, sym.LP, sym.RP, sym.LB, sym.RB, sym.LSB, sym.RSB
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "FLOAT_LITERAL",
      "AND &&", "ARRAY", "BOOLEAN", "BY", "DEF", "DIV /", "ELSE", "EQUAL", "EXIT", "FALSE",
      "FLOAT", "FOR", "IF", "INT", "LOOP", "MOD %",
      "NOT", "OR ||", "PRINT", "READ", "RETURN", "STRING", "TO", "TYPE", "VAR", "WHILE",
      "PLUS +", "MINUS -", "TIMES *", "TRUE",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ ==", "NEQ <>", "COLON :", "SEMI ;",
      "COMMA ,", "SHARP #", "DOT .", "LP (", "RP )", "LB "+'{', "RB "+'}', "LSB [", "RSB ]"
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return token_names[s.sym];
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) + " (line: " + token.left
                           + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (ie, return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** append the element elem at the end of the list
       (ie, return a new list containing the list followed by the elem) */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list
        (ie, return a new list containing the elem followed by the list) */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }

:};

/* Terminals (tokens returned by the scanner). */
terminal String  ID, STRING_LITERAL;
terminal Integer INTEGER_LITERAL;
terminal Float   FLOAT_LITERAL;
terminal         AND, ARRAY, BOOLEAN, BY, DEF, DIV, ELSE, EQUAL, EXIT, FALSE,
                 FLOAT, FOR, IF, INT, LOOP, MOD,
                 NOT, OR, PRINT, READ, RETURN, STRING, TO, TYPE, VAR, WHILE,
                 PLUS, MINUS, TIMES, TRUE, LT, LEQ, GT, GEQ, EQ, NEQ, COLON, SEMI,
                 COMMA, SHARP, DOT, LP, RP, LB, RB, LSB, RSB, UMINUS;

non terminal program;
non terminal BlockSt            block_content;
non terminal List<Definition>   defs;
non terminal Definition         def;
non terminal VarDef             var_def;
non terminal TypeDef            type_def;
non terminal FuncDef            func_def;
non terminal Type               type;
non terminal List<Type>         types;
non terminal List<Bind<Type>>   binding_list;
non terminal List<Bind<Type>>   bindings;
non terminal Bind               binding;
non terminal Lvalue             lvalue;
non terminal Expr               expr;
non terminal List<Expr>         expr_list;
non terminal List<Expr>         exprs;
non terminal Bind<Expr>         field_assignment;
non terminal List<Bind<Expr>>   field_assignments;
non terminal Stmt               stmt;
non terminal Stmt               optional_else;
non terminal List<Lvalue>       lvalues;
non terminal List<Stmt>         stmts;

precedence nonassoc ELSE;
precedence nonassoc LP, RP, LB, RB, LSB, RSB, SEMI;
precedence nonassoc COMMA;
precedence left     OR;
precedence left     AND;
precedence right    NOT;
precedence nonassoc EQ, NEQ, LT, GT, LEQ, GEQ;
precedence left     PLUS, MINUS;
precedence left     TIMES, DIV, MOD;
precedence right    UMINUS;

start with program;

program         ::= block_content:bstmt   {: SPL.setAST(new Program(bstmt)); :}
                ;
block_content   ::= defs:ds stmts:ss  {: RESULT = new BlockSt(ds, ss); :}
                |   stmts:ss          {: RESULT = new BlockSt(nil, ss); :}
                ;

defs            ::= defs:ds def:d SEMI   {: RESULT = append(ds, d); :}
                |   def:d SEMI           {: RESULT = append(nil, d); :}
                ;
def             ::= var_def:v   {: RESULT = v; :}
                |   type_def:t  {: RESULT = t; :}
                |   func_def:f  {: RESULT = f; :}
                ;
var_def         ::= VAR ID:id EQUAL expr:e                 {: RESULT = new VarDef(id, new AnyType(), e); :}
                |   VAR ID:id COLON type:t EQUAL expr:e    {: RESULT = new VarDef(id, t, e); :}
                ;
type_def        ::= TYPE ID:id EQUAL type:t {: RESULT = new TypeDef(id, t); :}
                ;
func_def        ::= DEF ID:id LP binding_list:bs RP LB block_content:b RB              {: RESULT = new FuncDef(id, bs, new NoType(), b); :}
                |   DEF ID:id LP binding_list:bs RP COLON type:t LB block_content:b RB {: RESULT = new FuncDef(id, bs, t, b); :}
                ;

type            ::= INT:i                 {: RESULT = new IntType(); :}
                |   FLOAT                 {: RESULT = new FloatType(); :}
                |   BOOLEAN               {: RESULT = new BooleanType(); :}
                |   STRING                {: RESULT = new StringType(); :}
                |   ID:id                 {: RESULT = new NamedType(id); :}
                |   ARRAY LSB type:t RSB  {: RESULT = new ArrayType(t); :}
                |   LB bindings:bs RB     {: RESULT = new RecordType(bs); :}
                |   LP RP                 {: RESULT = new NoType(); :}
                |   LP type:t RP          {: RESULT = t; :}
                |   LP types:ts RP        {: RESULT = new TupleType(ts); :}
                ;
types           ::= types:ts COMMA type:t   {: RESULT = append(ts, t); :}
                | type:t                    {: RESULT = append(nil, t); :}
                ;

binding_list    ::=             {: RESULT = nil; :} // nothing
                |   bindings:bs {: RESULT = bs; :}
                ;
bindings        ::= bindings:bs COMMA binding:b {: RESULT = append(bs, b); :}
                |   binding:b                   {: RESULT = append(nil, b); :}
                ;
binding         ::= ID:id COLON type:t  {: RESULT = new Bind<Type>(id, t); :}
                ;

lvalue          ::= ID:id                               {: RESULT = new Var(id); :}
                |   lvalue:l LSB expr:e RSB             {: RESULT = new ArrayDeref(new LvalExp(l), e); :}
                |   lvalue:l DOT ID:id                  {: RESULT = new RecordDeref(new LvalExp(l), id); :}
                |   lvalue:l SHARP INTEGER_LITERAL:i    {: RESULT = new TupleDeref(new LvalExp(l), i); :}
                ;

expr            ::= INTEGER_LITERAL:i                   {: RESULT = new IntConst(i); :}
                |   FLOAT_LITERAL:f                     {: RESULT = new FloatConst(f); :}
                |   STRING_LITERAL:s                    {: RESULT = new StringConst(s); :}
                |   TRUE                                {: RESULT = new BooleanConst(true); :}
                |   FALSE                               {: RESULT = new BooleanConst(false); :}
                |   lvalue:l                            {: RESULT = new LvalExp(l); :}
                |   MINUS expr:e                        {: RESULT = new UnOpExp("minus", e); :} %prec UMINUS           
                |   NOT expr:e                          {: RESULT = new UnOpExp("not", e); :}
                |   expr:e1 PLUS expr:e2                {: RESULT = new BinOpExp("plus", e1, e2); :}
                |   expr:e1 MINUS expr:e2               {: RESULT = new BinOpExp("minus", e1, e2); :}
                |   expr:e1 TIMES expr:e2               {: RESULT = new BinOpExp("times", e1, e2); :}
                |   expr:e1 DIV expr:e2                 {: RESULT = new BinOpExp("div", e1, e2); :}
                |   expr:e1 MOD expr:e2                 {: RESULT = new BinOpExp("mod", e1, e2); :}
                |   expr:e1 AND expr:e2                 {: RESULT = new BinOpExp("and", e1, e2); :}
                |   expr:e1 OR expr:e2                  {: RESULT = new BinOpExp("or", e1, e2); :}
                |   expr:e1 EQ expr:e2                  {: RESULT = new BinOpExp("eq", e1, e2); :}
                |   expr:e1 NEQ expr:e2                 {: RESULT = new BinOpExp("neq", e1, e2); :}
                |   expr:e1 LT expr:e2                  {: RESULT = new BinOpExp("lt", e1, e2); :}
                |   expr:e1 LEQ expr:e2                 {: RESULT = new BinOpExp("leq", e1, e2); :}
                |   expr:e1 GT expr:e2                  {: RESULT = new BinOpExp("gt", e1, e2); :}
                |   expr:e1 GEQ expr:e2                 {: RESULT = new BinOpExp("geq", e1, e2); :}
                |   ARRAY LP expr:e1 COMMA expr:e2 RP   {: RESULT = new ArrayGen(e1, e2); :}
                |   ID:id LP expr_list:es RP            {: RESULT = new CallExp(id, es); :}
                |   LB field_assignments:fs RB          {: RESULT = new RecordExp(fs); :}
                |   LP RP                               {: RESULT = new NullExp(); :}
                |   LP expr:e RP                        {: RESULT = e; :}
                |   LP exprs:es RP                      {: RESULT = new TupleExp(es); :}
                |   LSB expr_list:es RSB                {: RESULT = new ArrayExp(es); :}
                ;
expr_list       ::=         {: RESULT = nil; :} // nothing
                | exprs:es  {: RESULT = es; :}
                ;
exprs           ::= exprs:es COMMA expr:e   {: RESULT = append(es, e); :}
                |   expr:e                  {: RESULT = append(nil, e); :}
                ;

field_assignment    ::= ID:id EQUAL expr:e  {: RESULT = new Bind<Expr>(id, e); :}
                    ;
field_assignments   ::= field_assignments:fs COMMA field_assignment:f   {: RESULT = append(fs, f); :}
                    | field_assignment:f                                {: RESULT = append(nil, f); :}
                    ;

stmt            ::= lvalue:l EQUAL expr:e                                       {: RESULT = new AssignSt(l, e); :}
                |   ID:id LP expr_list:es RP                                    {: RESULT = new CallSt(id, es); :}
                |   LB block_content:b RB                                       {: RESULT = b; :}
                |   READ LP lvalues:ls RP                                       {: RESULT = new ReadSt(ls); :}
                |   PRINT LP expr_list:es RP                                    {: RESULT = new PrintSt(es); :}
                |   IF LP expr:e RP stmt:s optional_else:oe                     {: RESULT = new IfSt(e, s, oe); :}
                |   FOR LP ID:id EQUAL expr:s TO expr:t RP stmt:st              {: RESULT = new ForSt(id, s, t, new IntConst(1), st); :}
                |   FOR LP ID:id EQUAL expr:s TO expr:t BY expr:b RP stmt:st    {: RESULT = new ForSt(id, s, t, b, st); :}
                |   WHILE LP expr:e RP stmt:s                                   {: RESULT = new WhileSt(e, s); :}
                |   LOOP stmt:s                                                 {: RESULT = new LoopSt(s); :}
                |   EXIT                                                        {: RESULT = new ExitSt(); :}
                |   RETURN                                                      {: RESULT = new ReturnSt(); :}
                |   RETURN expr:e                                               {: RESULT = new ReturnValueSt(e); :}
                ;

optional_else   ::=             {: RESULT = null; :} // nothing
                |   ELSE stmt:s {: RESULT = s; :}
                ;

lvalues         ::= lvalues:ls COMMA lvalue:l   {: RESULT = append(ls, l); :}
                |   lvalue:l                    {: RESULT = append(nil, l); :}
                ;

stmts           ::= stmt:s SEMI             {: RESULT = append(nil, s); :}
                |   stmts:ss stmt:s SEMI    {: RESULT = append(ss, s); :}
                ;
